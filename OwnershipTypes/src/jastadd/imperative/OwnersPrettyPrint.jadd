aspect OwnersPrettyPrint {
  // Pretty printing of ownership parameters

  eq ConcreteOwner.dumpString() = getClass().getName() + " [" + getID() + "]";
  eq OwnerVariable.dumpString() = getClass().getName() + " [" + getID() + "]";


    public void OwnerClassDecl.toString(StringBuffer s) {
      s.append(indent());
      getModifiers().toString(s);
      s.append("class " + name());
      s.append("/*<");
      for (OwnerVariable o : getOwnerParameterList()) {
        s.append(", ");o.toString(s);
      }
      s.append(">*/");
      if(hasSuperClassAccess()) {
        s.append(" extends ");
        getSuperClassAccess().toString(s);
      }
      if(getNumImplements() > 0) {
        s.append(" implements ");
        getImplements(0).toString(s);
        for(int i = 1; i < getNumImplements(); i++) {
          s.append(", ");
          getImplements(i).toString(s);
        }
      }
      ppBodyDecls(s);
    }

    public void OwnerInterfaceDecl.toString(StringBuffer s) {
      s.append(indent());
      getModifiers().toString(s);
      s.append("interface " + name());
      s.append("/*<");
      for (OwnerVariable o : getOwnerParameterList()) {
        s.append(", ");o.toString(s);
      }
      s.append(">*/");
      if(getNumSuperInterfaceId() > 0) {
        s.append(" extends ");
        getSuperInterfaceId(0).toString(s);
        for(int i = 1; i < getNumSuperInterfaceId(); i++) {
          s.append(", ");
          getSuperInterfaceId(i).toString(s);
        }
      }
      ppBodyDecls(s);
    }


  public void OwnTypeAccess.toString(StringBuffer s) {
    getTypeAccess().toString(s);
    if (getNumOwnerArgument() > 0) {
      s.append("/*<");
      for (Owner o : getOwnerArgumentList()) {
        o.toString(s);
        s.append(", ");
      }
      s.append(">*/");
    }
  }

  public void BadOwnerVariable.toString(StringBuffer s) { s.append(name()); }
  public void World.toString(StringBuffer s) { s.append(name()); }
  public void ThisOwner.toString(StringBuffer s) { s.append(name()); }
  public void UnknownOwner.toString(StringBuffer s) { s.append(name()); }
  public void ConcreteOwner.toString(StringBuffer s) {
    if (hasQualifier()) {
      s.append(getQualifier()).append(".this.");
    }
    s.append(name());
  }

  public void DependentOwner.toString(StringBuffer s) {
    ASTNode node = getNode();
    int line = getLine(node.getStart());
    int column = getColumn(node.getStart());
    /*
    dep_column_line_BasicType_paramName
    */
    s.append("dep_").append(line).append("_").append(column);
    s.append("_").append(getBasicType().fullName()).append("_").append(getID());
  }

  public void FixedThis.toString(StringBuffer s) {
    Expr node = getExpr();
    int line = getLine(node.getStart());
    int column = getColumn(node.getStart());
    // dep_column_line_BasicType_paramName
    s.append("fixedThis_").append(line).append("_").append(column);
  }


  public void OwnerVariable.toString(StringBuffer s) { s.append(name()); }
  public void OwnershipType.toString(StringBuffer s) {
    s.append(getInner().fullName());
    s.append(getSubstitution().toString());
  }

  eq OwnershipType.typeName() = toString();

  syn String AnyType.toString() = "anyType";
}


